* {
    margin: 0;
    padding: 0;
    /* the box sizing will incluide border/padding inside the width you give it instead of adding on to it */
    box-sizing: border-box;
}

/* adding in font family of poppins */
body {
    font-family: 'Poppins', sans-serif;
}

.navbar {
    display: flex;
    align-items: center;
    padding: 20px;
}

nav {
    /* flex means how much it will grow/shrink in its container */
    flex: 1;
    text-align: right;
}

nav ul {
    /* instead of it being block, its only takes up as much space as the ul */
    /* positioning flow of inline elements while retaining the box-model features of block elements. This is commonly used to place items side by side without forcing line breaks (like a block element would) and without them being fully inline (so you can use margins, padding, widths, etc.). */
    display: inline-block;
    /* no * for the bullet points */
    list-style: none;
}

/* targetting li inside ul inside nav's  */
nav ul li {
    display: inline-block;
    padding: 20px;
}

a {
    text-decoration: none;
    color: #555;
}

p {
    color: #555;
}

.container {
    /* sets the width of the container to be only 1500px */
    max-width: 1500px;
    /* makes the container in the center of the page */
    margin: auto;
    /* adds in padding only on the left and right by 25 more pixels */
    padding: 0 25px;
}

/* this whole section until h1 i don't understand how it works */
/* esp flex-basis... */
.row {
    display: flex;                  /* places child elements side by side */
    align-items: center;            /* center item vertically */
    flex-wrap: wrap;                /* allow column to wrap on smaller screens */
    justify-content: space-around;  /* evenly spaces column horizontally */
}

/* 
flex-basis: 50%;
Means each .col-2 tries to take up 50% width of the parent container (.row). With two .col-2 divs, each takes half the width, placing them side-by-side.

min-width: 300px;
Ensures columns never shrink below 300px. If the screen size becomes smaller, the columns will wrap vertically because of flex-wrap: wrap. 
*/
.col-2 {
    flex-basis: 50%;
    min-width: 300px;
}

/* 
max-width: 100%;
Ensures the image never overflows its parent. The image width automatically scales down proportionally to fit within .col-2.

-

padding: 50px 0;
Adds spacing above and below the image.
*/
.col-2 img {
    max-width: 100%;
    padding: 50px 0;
}

/* increases font size, makes some height between each line, then margin for top and bottom only */
.col-2 h1 {
    font-size: 50px;
    line-height: 60px;
    margin: 25px 0;
}

.btn {
    display: inline-block;
    background: #ff523b;
    color: #fff;
    padding: 8px 30px;
    margin: 30px 0;
    border-radius: 30px;
    transition: background 0.5s;
}

.btn:hover {
    background: #563434;
}

header {
    background: radial-gradient(#fff,#ffd6d6);
}

/* just adding more space for the row div */
header .row {
    margin-top: 70px;
}

/* categories */
.categories {
    margin: 70px 0;
}

.col-3 {
    flex-basis: 30%;
    min-width: 250px;
    margin-bottom: 30px;
}

.col-3 img {
    width: 100%;
}

.small-container {
    max-width: 1080px;
    margin: auto;
    padding: 0 25px;
}

/* featured products */
.col-4 {
    flex-basis: 25%;
    padding: 10px;
    min-width: 200px;
    margin-bottom: 50px;
    /* for the moving part of hover */
    transition: transform 0.5s;
}

.col-4 img {
    width: 100%;
}

.title {
    text-align: center;
    margin: 0 auto 80px; /* 80 px of space on bottom */

    /* Setting the parent element (.title) to position: relative establishes a positioning context, ensuring the pseudo-element is placed relative to .title rather than the entire webpage.*/
    position: relative;
    line-height: 60px;
    color: #555;
}

/* bottom line after title */
/* ::after is pseudo-element, add in extra element through CSS */
.title::after {
    content: '';                /* Important: Without content, the pseudo-element won't display. */
    background: #ff523b;      /* Sets the background color of the line (red color). */
    width: 80px;                /* Creates the size of the line (80 pixels wide, 5 pixels high). */
    height: 5px;
    border-radius: 5px;         /* Gives the edges of the line a nice rounded shape. */
    position: absolute;         /* Allows precise placement relative to the closest positioned parent element (position: relative on parent). */
    bottom: 0;
    left: 50%;
    transform: translateX(-50%);
}

h4 {
    color: #555;
    font-weight: normal;
}

.col-4 p {
    font-size: 14px;

}

/* different color for star icons */
.rating {
    color: #ff523b;
}

/* essentially when you hover over the columns, will move the column up 5 pxs */
.col-4:hover {
    transform: translateY(-5px);
}